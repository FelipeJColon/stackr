ints[order[i]] <- ints[order[i]] + 1
remainder <- remainder - 1
}
return(ints)
}
integer_part <- round_with_preserved_sum(S*weights)
integer_part
integer_part_index <- c(0,cumsum(integer_part))
existing_draws <- integer_part_index[K+1]
if (existing_draws < S){
remaining_draws <- S - existing_draws
remaining_assignment <- sample(1:K,
remaining_draws,
prob = weight,
replace = F)
integer_part[remaining_assignment] <- integer_part[remaining_assignment]+1
}
mixture_vector <- rep(NA, S)
for(k in 1:K) {
mixture_vector[(1 + integer_part_index[k]):integer_part_index[k + 1]] <-
individual_draws[1:integer_part[k], k]
}
return(mixture_vector)
mixture_from_sample <- function(data,
weights = NULL,
type = "crps") {
# number of models
models <- data$model %>%
unique()
K <- length(models)
regions <- data$geography %>%
unique()
R <- length(regions)
S <- data$sample_nr %>% max()
dates <- data$date %>%
unique()
T <- length(dates)
draw_from_models <-  function(data,
models,
weights,
regions,
S,
timepoint,
permutation = TRUE)
{
# S <- nrow(data)
K <- length(models)
individual_draws <- data %>%
dplyr::filter(model %in% models,
geography %in% regions,
date %in% as.Date(timepoint)) %>%
tidyr::pivot_wider(names_from = model, values_from = y_pred,
names_prefix = "y_pred_") %>%
dplyr::select(starts_with("y_pred_")) %>%
as.matrix()
if (permutation == TRUE) {
individual_draws <- individual_draws[sample(1:S), ]	 # random permutation of draws
}
round_with_preserved_sum <- function(x) {
target_sum = sum(x)
ints <- as.integer(x)
int_sum <- sum(ints)
remainder <- target_sum - int_sum
decimals <- x - ints
order <- order(decimals, decreasing = T)
i <- 1
while(remainder > 0) {
ints[order[i]] <- ints[order[i]] + 1
remainder <- remainder - 1
}
return(ints)
}
integer_part <- round_with_preserved_sum(S*weights)
integer_part_index <- c(0,cumsum(integer_part))
existing_draws <- integer_part_index[K+1]
if (existing_draws < S){
remaining_draws <- S - existing_draws
remaining_assignment <- sample(1:K,
remaining_draws,
prob = weight,
replace = F)
integer_part[remaining_assignment] <- integer_part[remaining_assignment] + 1
}
mixture_vector <- rep(NA, S)
for(k in 1:K) {
mixture_vector[(1 + integer_part_index[k]):integer_part_index[k + 1]] <-
individual_draws[1:integer_part[k], k]
}
return(mixture_vector)
}
# copy one model and fill data.frame
mix <- data %>%
dplyr::filter(model == models[1]) %>%
dplyr::group_by(geography, date) %>%
dplyr::mutate(model = "Mixture") %>%
dplyr::mutate(y_pred = draw_from_models(data,
models,
weights,
unique(geography),
S,
unique(date))) %>%
dplyr::ungroup()
return(mix)
}
test_mixture <- mixture_from_sample(testdata,
weights = weights)
integer_part <- round_with_preserved_sum(S*weights)
integer_part_index <- c(0,cumsum(integer_part))
integer_part_index
mixture_from_sample <- function(data,
weights = NULL,
type = "crps") {
# number of models
models <- data$model %>%
unique()
K <- length(models)
regions <- data$geography %>%
unique()
R <- length(regions)
S <- data$sample_nr %>% max()
dates <- data$date %>%
unique()
T <- length(dates)
draw_from_models <-  function(data,
models,
weights,
regions,
S,
timepoint,
permutation = TRUE)
{
# S <- nrow(data)
K <- length(models)
individual_draws <- data %>%
dplyr::filter(model %in% models,
geography %in% regions,
date %in% as.Date(timepoint)) %>%
tidyr::pivot_wider(names_from = model, values_from = y_pred,
names_prefix = "y_pred_") %>%
dplyr::select(starts_with("y_pred_")) %>%
as.matrix()
if (permutation == TRUE) {
individual_draws <- individual_draws[sample(1:S), ]	 # random permutation of draws
}
round_with_preserved_sum <- function(x) {
target_sum = sum(x)
ints <- as.integer(x)
int_sum <- sum(ints)
remainder <- target_sum - int_sum
decimals <- x - ints
order <- order(decimals, decreasing = T)
i <- 1
while(remainder > 0) {
ints[order[i]] <- ints[order[i]] + 1
remainder <- remainder - 1
}
return(ints)
}
integer_part <- round_with_preserved_sum(S*weights)
integer_part_index <- c(0,cumsum(integer_part))
existing_draws <- integer_part_index[K+1]
if (existing_draws < S){
remaining_draws <- S - existing_draws
remaining_assignment <- sample(1:K,
remaining_draws,
prob = weight,
replace = F)
integer_part[remaining_assignment] <- integer_part[remaining_assignment] + 1
}
mixture_vector <- rep(NA, S)
for(k in 1:K) {
mixture_vector[(1 + integer_part_index[k]):integer_part_index[k + 1]] <-
individual_draws[1:integer_part[k], k]
}
return(mixture_vector)
}
# copy one model and fill data.frame
mix <- data %>%
dplyr::filter(model == models[1]) %>%
dplyr::group_by(geography, date) %>%
dplyr::mutate(model = "Mixture") %>%
dplyr::mutate(y_pred = draw_from_models(data,
models,
weights,
unique(geography),
S,
unique(date))) %>%
dplyr::ungroup()
return(mix)
}
test_mixture <- mixture_from_sample(testdata,
weights = weights)
data = testdata
# number of models
models <- data$model %>%
unique()
K <- length(models)
regions <- data$geography %>%
unique()
R <- length(regions)
S <- data$sample_nr %>% max()
dates <- data$date %>%
unique()
T <- length(dates)
draw_from_models <-  function(data,
models,
weights,
regions,
S,
timepoint,
permutation = TRUE)
{
# S <- nrow(data)
K <- length(models)
individual_draws <- data %>%
dplyr::filter(model %in% models,
geography %in% regions,
date %in% as.Date(timepoint)) %>%
tidyr::pivot_wider(names_from = model, values_from = y_pred,
names_prefix = "y_pred_") %>%
dplyr::select(starts_with("y_pred_")) %>%
as.matrix()
if (permutation == TRUE) {
individual_draws <- individual_draws[sample(1:S), ]	 # random permutation of draws
}
round_with_preserved_sum <- function(x) {
target_sum = sum(x)
ints <- as.integer(x)
int_sum <- sum(ints)
remainder <- target_sum - int_sum
decimals <- x - ints
order <- order(decimals, decreasing = T)
i <- 1
while(remainder > 0) {
ints[order[i]] <- ints[order[i]] + 1
remainder <- remainder - 1
}
return(ints)
}
integer_part <- round_with_preserved_sum(S*weights)
integer_part_index <- c(0,cumsum(integer_part))
existing_draws <- integer_part_index[K+1]
if (existing_draws < S){
remaining_draws <- S - existing_draws
remaining_assignment <- sample(1:K,
remaining_draws,
prob = weight,
replace = F)
integer_part[remaining_assignment] <- integer_part[remaining_assignment] + 1
}
mixture_vector <- rep(NA, S)
for(k in 1:K) {
mixture_vector[(1 + integer_part_index[k]):integer_part_index[k + 1]] <-
individual_draws[1:integer_part[k], k]
}
return(mixture_vector)
}
data %>%
dplyr::filter(model == models[1]) %>%
dplyr::group_by(geography, date) %>%
dplyr::mutate(model = "Mixture") %>%
dplyr::mutate(y_pred = draw_from_models(data,
models,
weights,
unique(geography),
S,
unique(date)))
draw_from_models <-  function(data,
models,
weights,
regions,
S,
timepoint,
permutation = TRUE)
{
# S <- nrow(data)
K <- length(models)
individual_draws <- data %>%
dplyr::filter(model %in% models,
geography %in% regions,
date %in% as.Date(timepoint)) %>%
tidyr::pivot_wider(names_from = model, values_from = y_pred,
names_prefix = "y_pred_") %>%
dplyr::select(starts_with("y_pred_")) %>%
as.matrix()
if (permutation == TRUE) {
individual_draws <- individual_draws[sample(1:S), ]	 # random permutation of draws
}
round_with_preserved_sum <- function(x) {
target_sum = sum(x)
ints <- as.integer(x)
int_sum <- sum(ints)
remainder <- target_sum - int_sum
decimals <- x - ints
order <- order(decimals, decreasing = T)
i <- 1
while(remainder > 0) {
ints[order[i]] <- ints[order[i]] + 1
remainder <- remainder - 1
}
return(ints)
}
integer_part <- round_with_preserved_sum(S*weights)
integer_part_index <- c(0,cumsum(integer_part))
existing_draws <- integer_part_index[K+1]
if (existing_draws < S){
remaining_draws <- S - existing_draws
remaining_assignment <- sample(1:K,
remaining_draws,
prob = weights,
replace = F)
integer_part[remaining_assignment] <- integer_part[remaining_assignment] + 1
}
mixture_vector <- rep(NA, S)
for(k in 1:K) {
mixture_vector[(1 + integer_part_index[k]):integer_part_index[k + 1]] <-
individual_draws[1:integer_part[k], k]
}
return(mixture_vector)
}
data %>%
dplyr::filter(model == models[1]) %>%
dplyr::group_by(geography, date) %>%
dplyr::mutate(model = "Mixture") %>%
dplyr::mutate(y_pred = draw_from_models(data,
models,
weights,
unique(geography),
S,
unique(date))) %>%
dplyr::ungroup()
draw_from_models(data,
models,
weights,
unique(geography),
S,
unique(date)))
draw_from_models(data,
models,
weights,
unique(geography),
S,
unique(date))
draw_from_models(data,
models,
weights,
regions,
S,
timepoint)
draw_from_models(data,
models,
weights,
regions,
S,
timepoint) %>% length
S
# S <- nrow(data)
K <- length(models)
individual_draws <- data %>%
dplyr::filter(model %in% models,
geography %in% regions,
date %in% as.Date(timepoint)) %>%
tidyr::pivot_wider(names_from = model, values_from = y_pred,
names_prefix = "y_pred_") %>%
dplyr::select(starts_with("y_pred_")) %>%
as.matrix()
if (permutation == TRUE) {
individual_draws <- individual_draws[sample(1:S), ]	 # random permutation of draws
}
round_with_preserved_sum <- function(x) {
target_sum = sum(x)
ints <- as.integer(x)
int_sum <- sum(ints)
remainder <- target_sum - int_sum
decimals <- x - ints
order <- order(decimals, decreasing = T)
i <- 1
while(remainder > 0) {
ints[order[i]] <- ints[order[i]] + 1
remainder <- remainder - 1
}
return(ints)
}
integer_part <- round_with_preserved_sum(S*weights)
integer_part
integer_part_index <- c(0,cumsum(integer_part))
integer_part_index
existing_draws <- integer_part_index[K+1]
existing_draws
if (existing_draws < S){
remaining_draws <- S - existing_draws
remaining_assignment <- sample(1:K,
remaining_draws,
prob = weights,
replace = F)
integer_part[remaining_assignment] <- integer_part[remaining_assignment] + 1
}
existing_draws
mixture_vector <- rep(NA, S)
for(k in 1:K) {
mixture_vector[(1 + integer_part_index[k]):integer_part_index[k + 1]] <-
individual_draws[1:integer_part[k], k]
}
mixture_vector
mixture_vector %>% length()
mixture_vector <- rep(NA, S)
k = 1
(1 + integer_part_index[k]):integer_part_index[k + 1]
(1 + integer_part_index[k]):integer_part_index[k + 1]
mixture_vector[(1 + integer_part_index[k]):integer_part_index[k + 1]]
integer_part_index
integer_part
mixture_vector <- rep(NA, S)
for(k in 1:K) {
if (integer_part[k] = 0) next()
mixture_vector[(1 + integer_part_index[k]):integer_part_index[k + 1]] <-
individual_draws[1:integer_part[k], k]
}
for(k in 1:K) {
if (integer_part[k] == 0)
next()
mixture_vector[(1 + integer_part_index[k]):integer_part_index[k + 1]] <-
individual_draws[1:integer_part[k], k]
}
mixture_vector %>% length()
mixture_from_sample <- function(data,
weights = NULL,
type = "crps") {
# number of models
models <- data$model %>%
unique()
K <- length(models)
regions <- data$geography %>%
unique()
R <- length(regions)
S <- data$sample_nr %>% max()
dates <- data$date %>%
unique()
T <- length(dates)
draw_from_models <-  function(data,
models,
weights,
regions,
S,
timepoint,
permutation = TRUE)
{
# S <- nrow(data)
K <- length(models)
individual_draws <- data %>%
dplyr::filter(model %in% models,
geography %in% regions,
date %in% as.Date(timepoint)) %>%
tidyr::pivot_wider(names_from = model, values_from = y_pred,
names_prefix = "y_pred_") %>%
dplyr::select(starts_with("y_pred_")) %>%
as.matrix()
if (permutation == TRUE) {
individual_draws <- individual_draws[sample(1:S), ]	 # random permutation of draws
}
round_with_preserved_sum <- function(x) {
target_sum = sum(x)
ints <- as.integer(x)
int_sum <- sum(ints)
remainder <- target_sum - int_sum
decimals <- x - ints
order <- order(decimals, decreasing = T)
i <- 1
while(remainder > 0) {
ints[order[i]] <- ints[order[i]] + 1
remainder <- remainder - 1
}
return(ints)
}
integer_part <- round_with_preserved_sum(S*weights)
integer_part_index <- c(0,cumsum(integer_part))
existing_draws <- integer_part_index[K+1]
if (existing_draws < S){
remaining_draws <- S - existing_draws
remaining_assignment <- sample(1:K,
remaining_draws,
prob = weights,
replace = F)
integer_part[remaining_assignment] <- integer_part[remaining_assignment] + 1
}
mixture_vector <- rep(NA, S)
for(k in 1:K) {
# skip if no draws to make
if (integer_part[k] == 0)
next()
mixture_vector[(1 + integer_part_index[k]):integer_part_index[k + 1]] <-
individual_draws[1:integer_part[k], k]
}
return(mixture_vector)
}
# copy one model and fill data.frame
mix <- data %>%
dplyr::filter(model == models[1]) %>%
dplyr::group_by(geography, date) %>%
dplyr::mutate(model = "Mixture") %>%
dplyr::mutate(y_pred = draw_from_models(data,
models,
weights,
unique(geography),
S,
unique(date))) %>%
dplyr::ungroup()
return(mix)
}
test_mixture <- mixture_from_sample(testdata,
weights = weights)
devtools::document()
