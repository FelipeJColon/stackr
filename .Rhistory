library(devtools)
?use_data()
sample_forecast_rts <- readRDS("~/Desktop/forecast_rt_Austria.rds")
sample_forecast_rts <- readRDS("~/Desktop/forecast_rt_Austria.rds")
sample_observed_rts <- readRDS("~/Desktop/true_rt_Austria.rds")
sample_prepared_data <- readRDS("~/Desktop/prepared_data_Austria.rds")
use_data(sample_forecast_rts)
use_data(sample_observed_rts)
use_data(sample_prepared_data)
document()
stackr::sample_forecast_rts
stackr::sample_observed_rts
data <- stackr::sample_prepared_data
data
create_arrays(data)
use_package("magrittr")
create_arrays(data)
library(magrittr)
create_arrays(data)
use_package("dplyr")
library(dplyr)
use_package("tidyr")
library(tidyr)
create_arrays(data)
stack_crps(stackr::example_prepared_data)
stack_crps <- function(data,
lambda = NULL,
gamma = NULL,
dirichlet_alpha = 1.001) {
if (is.null(lambda))
for (t in 1:T)
lambda[t] <- 2 - (1 - t / T)^2
if (is.null(gamma))
gamma <- array(rep(1 / R, R))
arrays <- create_arrays(data)
standata <- list(K = K,
R = R,
T = T,
S = S,
predict_sample_mat = arrays$prediction_array,
y = arrays$true_value_array,
lambda = lambda,
gamma = gamma,
dirichlet_alpha = dirichlet_alpha)
# model <- stanmodels$stacking_crps     # use inside package
model <- rstan::stan_model("stan/crps_test.stan")
opt <- rstan::optimizing(model, data = standata)
return(opt$par)
}
stack_crps(stackr::example_prepared_data)
stack_crps <- function(data,
lambda = NULL,
gamma = NULL,
dirichlet_alpha = 1.001) {
if (is.null(lambda))
for (t in 1:T)
lambda[t] <- 2 - (1 - t / T)^2
if (is.null(gamma))
gamma <- array(rep(1 / R, R))
arrays <- create_arrays(data)
standata <- list(K = arrays$K,
R = arrays$R,
T = arrays$T,
S = arrays$S,
predict_sample_mat = arrays$prediction_array,
y = arrays$true_value_array,
lambda = lambda,
gamma = gamma,
dirichlet_alpha = dirichlet_alpha)
# model <- stanmodels$stacking_crps     # use inside package
model <- rstan::stan_model("stan/crps_test.stan")
opt <- rstan::optimizing(model, data = standata)
return(opt$par)
}
stack_crps(stackr::example_prepared_data)
stack_crps <- function(data,
lambda = NULL,
gamma = NULL,
dirichlet_alpha = 1.001) {
arrays <- create_arrays(data)
T <- arrays$T
R <- arrays$R
if (is.null(lambda))
for (t in 1:T)
lambda[t] <- 2 - (1 - t / T)^2
if (is.null(gamma))
gamma <- array(rep(1 / R, R))
standata <- list(K = arrays$K,
R = arrays$R,
T = arrays$T,
S = arrays$S,
predict_sample_mat = arrays$prediction_array,
y = arrays$true_value_array,
lambda = lambda,
gamma = gamma,
dirichlet_alpha = dirichlet_alpha)
# model <- stanmodels$stacking_crps     # use inside package
model <- rstan::stan_model("stan/crps_test.stan")
opt <- rstan::optimizing(model, data = standata)
return(opt$par)
}
stack_crps(stackr::example_prepared_data)
stack_crps(stackr::sample_prepared_data)
stack_crps <- function(data,
lambda = NULL,
gamma = NULL,
dirichlet_alpha = 1.001) {
arrays <- create_arrays(data)
T <- arrays$T
R <- arrays$R
if (is.null(lambda))
for (t in 1:T)
lambda[t] <- 2 - (1 - t / T)^2
if (is.null(gamma))
gamma <- array(rep(1 / R, R))
standata <- list(K = arrays$K,
R = arrays$R,
T = arrays$T,
S = arrays$S,
predict_sample_mat = arrays$prediction_array,
y = arrays$true_value_array,
lambda = lambda,
gamma = gamma,
dirichlet_alpha = dirichlet_alpha)
model <- stanmodels$stacking_crps     # use inside package
# model <- rstan::stan_model("stan/crps_test.stan")
opt <- rstan::optimizing(model, data = standata)
return(opt$par)
}
stack_crps(stackr::sample_prepared_data)
document()
library(stackr)
library(stackr)
document()
?use_mit_license()
use_mit_license("Nikos Bosse")
install.packages("tibble")
